#!/usr/bin/env node

/**
 * Load New Relic performance monitoring
 */

require('newrelic');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SK:server');
var http = require('http');
var cluster = require('cluster');

if(cluster.isMaster) {

  // Count the machine's CPUs
  var threads = require('os').cpus().length;

  // Create a worker for each CPU
  for (var i = 0; i < threads; i += 1) {
    cluster.fork();
  }

  // Listen for dying workers
  cluster.on('exit', onExit);

} else {

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(app.get('port'));
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  // named pipe
  if (isNaN(port)) return val;

  // port number
  if (port >= 0) return port;

  return false;
}

/**
 * Event listener for cluster "exit" event.
 */

function onExit(worker) {
  debug('Worker ' + worker.id + ' exited. Respawning...');
  cluster.fork();
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = isStr(port) ? ('Pipe ' + port) : ('Port ' + port);

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var id = cluster.worker.id;
  var bind = isStr(addr) ? ('pipe ' + addr) : ('port ' + addr.port);

  debug('Worker ' + id + ' listening on ' + bind);
}

/**
 * Check if provided attribute is a string
 */

function isStr(attr) {
  return (typeof attr === 'string');
}
