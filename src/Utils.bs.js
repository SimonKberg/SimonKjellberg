// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE

import * as Css from "bs-css/src/Css.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function str(prim) {
  return prim;
}

function dangerousHtml(html) {
  return {
          __html: html
        };
}

function $great$great$eq(value, fn) {
  if (value !== undefined) {
    return Curry._1(fn, Caml_option.valFromOption(value));
  }
  
}

function $pipe$unknown(value, $$default) {
  if (value !== undefined) {
    return Caml_option.valFromOption(value);
  } else {
    return $$default;
  }
}

function cn(cns) {
  var __x = Belt_List.keep(cns, (function (x) {
          return x !== "";
        }));
  return $$String.concat(" ", __x);
}

function string_of_rgb(r, g, b) {
  return "rgb(" + (String(r) + (", " + (String(g) + (", " + (String(b) + ")")))));
}

function rgb_of_string(s) {
  var match = s.match((/^rgb\((\d+), ?(\d+), ?(\d+)\)/));
  if (match !== null) {
    return Css.rgb(Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 1)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 2)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 3)));
  } else {
    return Js_exn.raiseError("Invalid formatted value");
  }
}

function string_of_rgba(r, g, b, a) {
  return "rgba(" + (r.toString() + (", " + (String(g) + (", " + (String(b) + (", " + (a.toString() + ")")))))));
}

function rgba_of_string(s) {
  var match = s.match((/^rgba\((\d+), ?(\d+), ?(\d+), ?([\d.]+)\)/));
  if (match !== null) {
    return Css.rgba(Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 1)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 2)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 3)), Caml_format.caml_float_of_string(Caml_array.caml_array_get(match, 4)));
  } else {
    return Js_exn.raiseError("Invalid formatted value");
  }
}

function string_of_hsl(h, s, l) {
  return "hsl(" + (String(h) + (", " + (String(s) + ("%, " + (String(l) + "%)")))));
}

function hsl_of_string(s) {
  var match = s.match((/^hsl\((\d+), ?(\d+)%, ?(\d+)%\)/));
  if (match !== null) {
    return Css.hsl(Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 1)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 2)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 3)));
  } else {
    return Js_exn.raiseError("Invalid formatted value");
  }
}

function string_of_hsla(h, s, l, a) {
  return "hsla(" + (String(h) + (", " + (String(s) + ("%, " + (String(l) + ("%, " + (a.toString() + ")")))))));
}

function hsla_of_string(s) {
  var match = s.match((/^hsl\((\d+), ?(\d+)%, ?(\d+)%, ?([\d.]+)\)/));
  if (match !== null) {
    return Css.hsla(Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 1)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 2)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(match, 3)), Caml_format.caml_float_of_string(Caml_array.caml_array_get(match, 4)));
  } else {
    return Js_exn.raiseError("Invalid formatted value");
  }
}

function string_of_color(param) {
  if (typeof param === "number") {
    if (param >= 582626130) {
      return "transparent";
    } else {
      return "currentColor";
    }
  } else {
    var variant = param[0];
    if (variant !== -878128972) {
      if (variant >= 5197569) {
        if (variant >= 5692173) {
          var match = param[1];
          return string_of_rgb(match[0], match[1], match[2]);
        } else {
          var match$1 = param[1];
          return string_of_hsl(match$1[0], match$1[1], match$1[2]);
        }
      } else if (variant >= 5194459) {
        return "#" + param[1];
      } else {
        var match$2 = param[1];
        return string_of_hsla(match$2[0], match$2[1], match$2[2], match$2[3]);
      }
    } else {
      var match$3 = param[1];
      return string_of_rgba(match$3[0], match$3[1], match$3[2], match$3[3]);
    }
  }
}

function color_of_string(s) {
  if (s.startsWith("rgb(")) {
    return rgb_of_string(s);
  } else if (s.startsWith("rgba(") || s.startsWith("rgba(")) {
    return rgba_of_string(s);
  } else if (s.startsWith("#")) {
    return Css.hex(s.slice(1));
  } else if (s === "transparent") {
    return Css.transparent;
  } else if (s === "currentColor") {
    return Css.currentColor;
  } else {
    return Js_exn.raiseError("Invalid value");
  }
}

export {
  str ,
  dangerousHtml ,
  $great$great$eq ,
  $pipe$unknown ,
  cn ,
  string_of_rgb ,
  rgb_of_string ,
  string_of_rgba ,
  rgba_of_string ,
  string_of_hsl ,
  hsl_of_string ,
  string_of_hsla ,
  hsla_of_string ,
  string_of_color ,
  color_of_string ,
  
}
/* Css Not a pure module */
