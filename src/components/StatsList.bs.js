// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonApollo from "@simonkberg/reason-apollo/src/ReasonApollo.bs.js";
import * as StatsListItemsJs from "./StatsListItems.js";
import * as Utils$SimonKjellberg from "../Utils.bs.js";
import * as Loader$SimonKjellberg from "./Loader.bs.js";
import * as UnorderedList$SimonKjellberg from "./UnorderedList.bs.js";

var make = StatsListItemsJs.default;

var StatsListItems = /* module */[/* make */make];

var ppx_printed_query = "query WakaTimeStatsQuery  {\nwakaTime  {\nstats  {\nname  \npercent  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "wakaTime");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "stats");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$1 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeArray(value$1);
          tmp$1 = match$4 !== undefined ? match$4.map((function (value) {
                    var match = Js_json.decodeObject(value);
                    if (match !== undefined) {
                      var value$1 = Caml_option.valFromOption(match);
                      var match$1 = Js_dict.get(value$1, "name");
                      var tmp;
                      if (match$1 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$1);
                        var match$2 = Js_json.decodeString(value$2);
                        tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      } else {
                        tmp = Js_exn.raiseError("graphql_ppx: Field name on type WakaTimeStats is missing");
                      }
                      var match$3 = Js_dict.get(value$1, "percent");
                      var tmp$1;
                      if (match$3 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$3);
                        var match$4 = Js_json.decodeNumber(value$3);
                        tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$3));
                      } else {
                        tmp$1 = Js_exn.raiseError("graphql_ppx: Field percent on type WakaTimeStats is missing");
                      }
                      return {
                              name: tmp,
                              percent: tmp$1
                            };
                    } else {
                      return Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                  })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field stats on type WakaTime is missing");
        }
        tmp = {
          stats: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field wakaTime on type Query is missing");
    }
    return {
            wakaTime: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var WakaTimeStats = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var WakaTimeStatsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function StatsList(Props) {
  return React.createElement(WakaTimeStatsQuery[/* make */4], {
              children: (function (param) {
                  var result = param[/* result */0];
                  if (typeof result === "number") {
                    return React.createElement(Loader$SimonKjellberg.make, { });
                  } else if (result.tag) {
                    var response = result[0];
                    if (response.wakaTime.stats.length === 0) {
                      return React.createElement("p", undefined, React.createElement("em", undefined, Utils$SimonKjellberg.str("Oops! Looks like the language statistics are currently empty. " + "I\'m probably on vacation ðŸŒ´ (or something is broken).")));
                    } else {
                      return React.createElement(UnorderedList$SimonKjellberg.make, {
                                  children: React.createElement(make, {
                                        stats: response.wakaTime.stats
                                      })
                                });
                    }
                  } else {
                    return React.createElement("p", undefined, Utils$SimonKjellberg.str("Language statistics are temporarily unavailable :("));
                  }
                })
            });
}

var make$2 = StatsList;

var $$default = StatsList;

export {
  StatsListItems ,
  WakaTimeStats ,
  WakaTimeStatsQuery ,
  make$2 as make,
  $$default ,
  $$default as default,
  
}
/* make Not a pure module */
